export type ScreenOrNavigator = string | ScreenSpec | NavigatorSpec;

export interface NavigationParameterSpec {
  name: string;
  type: string;
}

export interface ScreenSpec {
  /**
   * Id is inferred when discovered in a keyed map, but needs to be explicit when in an array of screens
   **/
  id?: string;
  /**
   * Name will be id (or the discovered key) if not specified
   * Only specify this if you need to override the name for some reason.
   * Names should be in **PascalCase**.
   */
  name?: string;
  /**
   * The name of the autogenerated type that will contain the params for this screen.
   * Should be something like: `ScreenNameParams`.
   */
  parameterType?: string;
  /**
   * If the parameter type should extend another type, specify it here.
   */
  extends?: string;
  /**
   * An array of Parameters that are passed to the screen. (optional)
   * Remember to specify an import for any custom types used here.
   */
  parameters?: Array<NavigationParameterSpec>;
  /**
   * The name of the screen for analytics events (possibly will change to allow more settings)
   */
  analytics?: string | false;
  /**
   * Specify any custom types that need to be imported for use in params etc.
   * @example
   *  imports: {
   *   name: 'Foo',
   *   source: 'foo-source',
   *  }
   *
   *  // will add an import like this to the generated file:
   *
   *  import { Foo } from 'foo-source';
   *
   */
  imports?: ImportSpecs[];
  import?: ImportSpecs[];
}

export interface NavigatorSpec extends ScreenSpec {
  /**
   * The type of the navigator.
   */
  type: 'stack' | 'nativeStack' | 'drawer' | 'bottomTab' | 'materialBottomTab' | 'materialTopTab';
  /**
   * Sets the name of the autogenerated type that will contain the paramList for this navigator.
   * This is the type that will be used in the navigator's screen props, and used to type the useNavigationHook.
   * Should be unique within the navigator, and something like: `StackParamList`, `TabParamList`, etc.
   */
  parameterListType?: string;
  /**
   * If each child screen should receive a certain parameter type by default, list it here.
   */
  defaultParameters?: string;
  /**
   * Do not prefix paths of this navigator
   */
  noPrefix?: boolean;
  /**
   * The child screens of this navigator.
   * Defined as a keyed map or an array of screens. (prefer use of the keyed map)
   * @example
   * `{ [screenName: string]: ScreenOrNavigator }`
   */
  screens: { [screenName: string]: ScreenOrNavigator } | Array<ScreenOrNavigator>;
}

export interface ImportSpec {
  name: string;
  source: string;
}

export type ImportSpecs = ImportSpec | ImportSpecs[];

export interface NavigationSpecification extends NavigatorSpec {
  preamble?: string;
}
